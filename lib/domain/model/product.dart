import 'package:equatable/equatable.dart';

/// Represents a product entity within the CCL application domain.
///
/// This class models a product with basic inventory attributes such as stock, input, and output.
/// It is immutable and supports value-based comparison using `Equatable`.
///
/// ### Fields:
/// - [id] *(optional)*: The unique identifier of the product (nullable).
/// - [name]: The product name (required).
/// - [description]: A short description of the product (required).
/// - [stock]: Current stock level (default: 0).
/// - [input]: Quantity of product input or received (default: 0).
/// - [output]: Quantity of product output or dispatched (default: 0).
///
/// ### Features:
/// - `copyWith` method to create modified copies.
/// - `toMap` for serialization (useful for inserts).
/// - `fromMap` for deserialization (e.g., from raw SQL queries).
///
/// ### Example Usage:
/// ```dart
/// final product = Product(id: 1, name: 'Apple', description: 'Fresh red apple');
/// final updatedProduct = product.copyWith(stock: 20);
/// final map = product.toMap();
/// ```
class Product extends Equatable {
  const Product({
    this.id,
    required this.name,
    required this.description,
    this.stock = 0,
    this.input = 0,
    this.output = 0,
  });

  /// Unique product identifier (nullable, usually auto-generated by DB).
  final int? id;

  /// Name of the product.
  final String name;

  /// Description of the product.
  final String description;

  /// Total stock available.
  final int stock;

  /// Total quantity received.
  final int input;

  /// Total quantity dispatched or removed.
  final int output;

  /// Equatable props for value comparison.
  @override
  List<Object?> get props => [
    id,
    name,
    description,
    stock,
    input,
    output,
  ];

  /// Creates a new instance by copying current values and overriding selected fields.
  Product copyWith({
    int? id,
    String? name,
    String? description,
    int? stock,
    int? input,
    int? output,
  }) {
    return Product(
      id: id ?? this.id,
      name: name ?? this.name,
      description: description ?? this.description,
      stock: stock ?? this.stock,
      input: input ?? this.input,
      output: output ?? this.output,
    );
  }

  /// Converts the object into a map, typically for insertion into a database.
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'description': description,
    };
  }

  /// Constructs a [Product] instance from a map.
  ///
  /// Typically used with query results that contain columns:
  /// `id`, `name`, `description`, `total_input`, `total_output`, `stock`.
  factory Product.fromMap(Map<String, dynamic> map) {
    return Product(
      id: map['id'] as int,
      name: map['name'] as String,
      description: map['description'] as String,
      input: map['total_input'] as int,
      output: map['total_output'] as int,
      stock: map['stock'] as int,
    );
  }
}
